
Stringify:
take off drone
forever
    set size to (frontal laser distance)
    if ((size) > '0') then
        set x to (get x_position of object red)
        set y to (get y_position of object red)
        if ((x) > '  165') then
            turn drone right speed 2
        else
            turn drone left speed 2
        end
        if ((y) > ' 110 ') then
            move drone down speed 1
        else
            move drone up speed 1
        end
        if ((size) > '700') then
            move drone back speed 2
        else
            move drone forward speed 2
        end
    else
        turn drone left speed 2
        stop robot-drone
    end
end

>>>
>>>
>>>----------- Processing sentence: take off drone ----------
>>>
>>
>>> ratio of similarity betwen: take off drone --and-- take off drone --> 1.0
>>> original, translation, score: take off drone robot.take_off() 1.0
>>> compile: take off drone --return-- <Parser 'take off drone'> take off drone
>>> p.parse(sentence) sentence: take off drone <Result () {}>
>>> args encontrados: []
>>> traduccion final: robot.take_off() ()
>>>
>>>
>>>----------- Processing sentence: forever ----------
>>>
>>
>>> ratio of similarity betwen: forever --and-- forever --> 1.0
>>> original, translation, score: forever while True: 1.0
>>> compile: forever --return-- <Parser 'forever'> forever
>>> p.parse(sentence) sentence: forever <Result () {}>
>>> args encontrados: []
>>> traduccion final: while True: ()
>>>
>>>
>>>----------- Processing sentence:     set size to (frontal laser distance) ----------
>>>
>>
>>> ratio of similarity betwen:     set size to (frontal laser distance) --and-- set {} to {} --> 0.307692307692
>>> original, translation, score: set {} to {} %s = %s 0.307692307692
>>> compile: set {} to {} --return-- <Parser 'set {} to {}'>     set size to (frontal laser distance)
>>> p.parse(sentence) sentence:     set size to (frontal laser distance) <Result (u'size', u'(frontal laser distance)') {}>
>>> args encontrados: [u'size', u'(frontal laser distance)']
>>> looking for more blocks: size
>>> new sentence_mapping of: size --return-- None None
>>> looking for more blocks: (frontal laser distance)
>>> ratio of similarity betwen: (frontal laser distance) --and-- frontal laser distance --> 0.95652173913
>>> original, translation, score: frontal laser distance robot.get_laser_distance() 0.95652173913
>>> compile: frontal laser distance --return-- <Parser 'frontal laser dis...'> (frontal laser distance)
>>> p.parse(sentence) sentence: (frontal laser distance) None
>>> new sentence_mapping of: (frontal laser distance) --return-- frontal laser distance robot.get_laser_distance()
>>> frase en la que reemplazar: (frontal laser distance)
>>> reemplazando: frontal laser distance --with-- robot.get_laser_distance()
>>> traduccion final: size = (robot.get_laser_distance()) (u'size', u'(robot.get_laser_distance())')
>>>
>>>
>>>----------- Processing sentence:     if ((size) > '0') then ----------
>>>
>>
>>> ratio of similarity betwen:     if ((size) > 0) then --and-- if {} then --> 0.470588235294
>>> original, translation, score: if {} then if %s: 0.470588235294
>>> compile: if {} then --return-- <Parser 'if {} then'>     if ((size) > 0) then
>>> p.parse(sentence) sentence:     if ((size) > 0) then <Result (u'((size) > 0)',) {}>
>>> args encontrados: [u'((size) > 0)']
>>> looking for more blocks: ((size) > 0)
>>> new sentence_mapping of: ((size) > 0) --return-- None None
>>> traduccion final: if ((size) > 0): (u'((size) > 0)',)
>>>
>>>
>>>----------- Processing sentence:         set x to (get x_position of object red) ----------
>>>
>>
>>> ratio of similarity betwen:         set x to (get x_position of object red) --and-- set {} to {} --> 0.271186440678
>>> original, translation, score: set {} to {} %s = %s 0.271186440678
>>> compile: set {} to {} --return-- <Parser 'set {} to {}'>         set x to (get x_position of object red)
>>> p.parse(sentence) sentence:         set x to (get x_position of object red) <Result (u'x', u'(get x_position of object red)') {}>
>>> args encontrados: [u'x', u'(get x_position of object red)']
>>> looking for more blocks: x
>>> new sentence_mapping of: x --return-- None None
>>> looking for more blocks: (get x_position of object red)
>>> ratio of similarity betwen: (get x_position of object red) --and-- get {} of object {} --> 0.612244897959
>>> ratio of similarity betwen: (get x_position of object red) --and-- get pose3d {} --> 0.372093023256
>>> original, translation, score: get {} of object {} robot.get_object("%s","%s") 0.612244897959
>>> compile: get {} of object {} --return-- <Parser 'get {} of object {}'> (get x_position of object red)
>>> p.parse(sentence) sentence: (get x_position of object red) None
>>> new sentence_mapping of: (get x_position of object red) --return-- get {} of object {} robot.get_object("%s","%s")
>>> frase en la que reemplazar: (get x_position of object red)
>>> reemplazando: get {} of object {} --with-- robot.get_object("%s","%s")
>>> traduccion final: x = (get x_position of object red) (u'x', u'(get x_position of object red)')
>>>
>>>
>>>----------- Processing sentence:         set y to (get y_position of object red) ----------
>>>
>>
>>> ratio of similarity betwen:         set y to (get y_position of object red) --and-- set {} to {} --> 0.271186440678
>>> original, translation, score: set {} to {} %s = %s 0.271186440678
>>> compile: set {} to {} --return-- <Parser 'set {} to {}'>         set y to (get y_position of object red)
>>> p.parse(sentence) sentence:         set y to (get y_position of object red) <Result (u'y', u'(get y_position of object red)') {}>
>>> args encontrados: [u'y', u'(get y_position of object red)']
>>> looking for more blocks: y
>>> new sentence_mapping of: y --return-- None None
>>> looking for more blocks: (get y_position of object red)
>>> ratio of similarity betwen: (get y_position of object red) --and-- get {} of object {} --> 0.612244897959
>>> ratio of similarity betwen: (get y_position of object red) --and-- get pose3d {} --> 0.372093023256
>>> original, translation, score: get {} of object {} robot.get_object("%s","%s") 0.612244897959
>>> compile: get {} of object {} --return-- <Parser 'get {} of object {}'> (get y_position of object red)
>>> p.parse(sentence) sentence: (get y_position of object red) None
>>> new sentence_mapping of: (get y_position of object red) --return-- get {} of object {} robot.get_object("%s","%s")
>>> frase en la que reemplazar: (get y_position of object red)
>>> reemplazando: get {} of object {} --with-- robot.get_object("%s","%s")
>>> traduccion final: y = (get y_position of object red) (u'y', u'(get y_position of object red)')
>>>
>>>
>>>----------- Processing sentence:         if ((x) > '  165') then ----------
>>>
>>
>>> ratio of similarity betwen:         if ((x) >   165) then --and-- if {} then --> 0.410256410256
>>> original, translation, score: if {} then if %s: 0.410256410256
>>> compile: if {} then --return-- <Parser 'if {} then'>         if ((x) >   165) then
>>> p.parse(sentence) sentence:         if ((x) >   165) then <Result (u'((x) >   165)',) {}>
>>> args encontrados: [u'((x) >   165)']
>>> looking for more blocks: ((x) >   165)
>>> new sentence_mapping of: ((x) >   165) --return-- None None
>>> traduccion final: if ((x) >   165): (u'((x) >   165)',)
>>>
>>>
>>>----------- Processing sentence:             turn drone right speed 2 ----------
>>>
>>
>>> ratio of similarity betwen:             turn drone right speed 2 --and-- turn drone {} speed {} --> 0.620689655172
>>> ratio of similarity betwen:             turn drone right speed 2 --and-- turn robot {} speed {} --> 0.51724137931
>>> original, translation, score: turn drone {} speed {} robot.turn("%s", %s) 0.620689655172
>>> compile: turn drone {} speed {} --return-- <Parser 'turn drone {} spe...'>             turn drone right speed 2
>>> p.parse(sentence) sentence:             turn drone right speed 2 <Result (u'right', u'2') {}>
>>> args encontrados: [u'right', u'2']
>>> looking for more blocks: right
>>> new sentence_mapping of: right --return-- None None
>>> looking for more blocks: 2
>>> new sentence_mapping of: 2 --return-- None None
>>> traduccion final: robot.turn("right", 2) (u'right', u'2')
>>>
>>>
>>>----------- Processing sentence:         else ----------
>>>
>>
>>> ratio of similarity betwen:         else --and-- else --> 0.5
>>> original, translation, score: else else: 0.5
>>> compile: else --return-- <Parser 'else'>         else
>>> p.parse(sentence) sentence:         else <Result () {}>
>>> args encontrados: []
>>> traduccion final: else: ()
>>>
>>>
>>>----------- Processing sentence:             turn drone left speed 2 ----------
>>>
>>
>>> ratio of similarity betwen:             turn drone left speed 2 --and-- turn drone {} speed {} --> 0.631578947368
>>> ratio of similarity betwen:             turn drone left speed 2 --and-- turn robot {} speed {} --> 0.526315789474
>>> original, translation, score: turn drone {} speed {} robot.turn("%s", %s) 0.631578947368
>>> compile: turn drone {} speed {} --return-- <Parser 'turn drone {} spe...'>             turn drone left speed 2
>>> p.parse(sentence) sentence:             turn drone left speed 2 <Result (u'left', u'2') {}>
>>> args encontrados: [u'left', u'2']
>>> looking for more blocks: left
>>> new sentence_mapping of: left --return-- None None
>>> looking for more blocks: 2
>>> new sentence_mapping of: 2 --return-- None None
>>> traduccion final: robot.turn("left", 2) (u'left', u'2')
>>>
>>>
>>>----------- Processing sentence:         end ----------
>>>
>>
>>> ratio of similarity betwen:         end --and-- end --> 0.428571428571
>>> original, translation, score: end  0.428571428571
>>> compile: end --return-- <Parser 'end'>         end
>>> p.parse(sentence) sentence:         end <Result () {}>
>>> args encontrados: []
>>> traduccion final:  ()
>>>
>>>
>>>----------- Processing sentence:         if ((y) > ' 110 ') then ----------
>>>
>>
>>> ratio of similarity betwen:         if ((y) >  110 ) then --and-- if {} then --> 0.410256410256
>>> original, translation, score: if {} then if %s: 0.410256410256
>>> compile: if {} then --return-- <Parser 'if {} then'>         if ((y) >  110 ) then
>>> p.parse(sentence) sentence:         if ((y) >  110 ) then <Result (u'((y) >  110 )',) {}>
>>> args encontrados: [u'((y) >  110 )']
>>> looking for more blocks: ((y) >  110 )
>>> new sentence_mapping of: ((y) >  110 ) --return-- None None
>>> traduccion final: if ((y) >  110 ): (u'((y) >  110 )',)
>>>
>>>
>>>----------- Processing sentence:             move drone down speed 1 ----------
>>>
>>
>>> ratio of similarity betwen:             move drone down speed 1 --and-- move robot {} --> 0.333333333333
>>> ratio of similarity betwen:             move drone down speed 1 --and-- move drone {} speed {} --> 0.631578947368
>>> ratio of similarity betwen:             move drone down speed 1 --and-- move robot {} speed {} --> 0.526315789474
>>> ratio of similarity betwen:             move drone down speed 1 --and-- move robot {} meters {} --> 0.310344827586
>>> original, translation, score: move drone {} speed {} robot.move("%s", %s) 0.631578947368
>>> compile: move drone {} speed {} --return-- <Parser 'move drone {} spe...'>             move drone down speed 1
>>> p.parse(sentence) sentence:             move drone down speed 1 <Result (u'down', u'1') {}>
>>> args encontrados: [u'down', u'1']
>>> looking for more blocks: down
>>> new sentence_mapping of: down --return-- None None
>>> looking for more blocks: 1
>>> new sentence_mapping of: 1 --return-- None None
>>> traduccion final: robot.move("down", 1) (u'down', u'1')
>>>
>>>
>>>----------- Processing sentence:         else ----------
>>>
>>
>>> ratio of similarity betwen:         else --and-- else --> 0.5
>>> original, translation, score: else else: 0.5
>>> compile: else --return-- <Parser 'else'>         else
>>> p.parse(sentence) sentence:         else <Result () {}>
>>> args encontrados: []
>>> traduccion final: else: ()
>>>
>>>
>>>----------- Processing sentence:             move drone up speed 1 ----------
>>>
>>
>>> ratio of similarity betwen:             move drone up speed 1 --and-- move robot {} --> 0.347826086957
>>> ratio of similarity betwen:             move drone up speed 1 --and-- move drone {} speed {} --> 0.654545454545
>>> ratio of similarity betwen:             move drone up speed 1 --and-- move robot {} speed {} --> 0.545454545455
>>> ratio of similarity betwen:             move drone up speed 1 --and-- move robot {} meters {} --> 0.321428571429
>>> original, translation, score: move drone {} speed {} robot.move("%s", %s) 0.654545454545
>>> compile: move drone {} speed {} --return-- <Parser 'move drone {} spe...'>             move drone up speed 1
>>> p.parse(sentence) sentence:             move drone up speed 1 <Result (u'up', u'1') {}>
>>> args encontrados: [u'up', u'1']
>>> looking for more blocks: up
>>> new sentence_mapping of: up --return-- None None
>>> looking for more blocks: 1
>>> new sentence_mapping of: 1 --return-- None None
>>> traduccion final: robot.move("up", 1) (u'up', u'1')
>>>
>>>
>>>----------- Processing sentence:         end ----------
>>>
>>
>>> ratio of similarity betwen:         end --and-- end --> 0.428571428571
>>> original, translation, score: end  0.428571428571
>>> compile: end --return-- <Parser 'end'>         end
>>> p.parse(sentence) sentence:         end <Result () {}>
>>> args encontrados: []
>>> traduccion final:  ()
>>>
>>>
>>>----------- Processing sentence:         if ((size) > '700') then ----------
>>>
>>
>>> ratio of similarity betwen:         if ((size) > 700) then --and-- if {} then --> 0.4
>>> original, translation, score: if {} then if %s: 0.4
>>> compile: if {} then --return-- <Parser 'if {} then'>         if ((size) > 700) then
>>> p.parse(sentence) sentence:         if ((size) > 700) then <Result (u'((size) > 700)',) {}>
>>> args encontrados: [u'((size) > 700)']
>>> looking for more blocks: ((size) > 700)
>>> new sentence_mapping of: ((size) > 700) --return-- None None
>>> traduccion final: if ((size) > 700): (u'((size) > 700)',)
>>>
>>>
>>>----------- Processing sentence:             move drone back speed 2 ----------
>>>
>>
>>> ratio of similarity betwen:             move drone back speed 2 --and-- move robot {} --> 0.333333333333
>>> ratio of similarity betwen:             move drone back speed 2 --and-- move drone {} speed {} --> 0.631578947368
>>> ratio of similarity betwen:             move drone back speed 2 --and-- move robot {} speed {} --> 0.526315789474
>>> ratio of similarity betwen:             move drone back speed 2 --and-- move robot {} meters {} --> 0.310344827586
>>> original, translation, score: move drone {} speed {} robot.move("%s", %s) 0.631578947368
>>> compile: move drone {} speed {} --return-- <Parser 'move drone {} spe...'>             move drone back speed 2
>>> p.parse(sentence) sentence:             move drone back speed 2 <Result (u'back', u'2') {}>
>>> args encontrados: [u'back', u'2']
>>> looking for more blocks: back
>>> new sentence_mapping of: back --return-- None None
>>> looking for more blocks: 2
>>> new sentence_mapping of: 2 --return-- None None
>>> traduccion final: robot.move("back", 2) (u'back', u'2')
>>>
>>>
>>>----------- Processing sentence:         else ----------
>>>
>>
>>> ratio of similarity betwen:         else --and-- else --> 0.5
>>> original, translation, score: else else: 0.5
>>> compile: else --return-- <Parser 'else'>         else
>>> p.parse(sentence) sentence:         else <Result () {}>
>>> args encontrados: []
>>> traduccion final: else: ()
>>>
>>>
>>>----------- Processing sentence:             move drone forward speed 2 ----------
>>>
>>
>>> ratio of similarity betwen:             move drone forward speed 2 --and-- move robot {} --> 0.313725490196
>>> ratio of similarity betwen:             move drone forward speed 2 --and-- move drone {} speed {} --> 0.6
>>> ratio of similarity betwen:             move drone forward speed 2 --and-- move robot {} speed {} --> 0.5
>>> ratio of similarity betwen:             move drone forward speed 2 --and-- move robot {} meters {} --> 0.295081967213
>>> original, translation, score: move drone {} speed {} robot.move("%s", %s) 0.6
>>> compile: move drone {} speed {} --return-- <Parser 'move drone {} spe...'>             move drone forward speed 2
>>> p.parse(sentence) sentence:             move drone forward speed 2 <Result (u'forward', u'2') {}>
>>> args encontrados: [u'forward', u'2']
>>> looking for more blocks: forward
>>> ratio of similarity betwen: forward --and-- forever --> 0.571428571429
>>> original, translation, score: forever while True: 0.571428571429
>>> compile: forever --return-- <Parser 'forever'> forward
>>> p.parse(sentence) sentence: forward None
>>> new sentence_mapping of: forward --return-- forever while True:
>>> frase en la que reemplazar: forward
>>> reemplazando: forever --with-- while True:
>>> looking for more blocks: 2
>>> new sentence_mapping of: 2 --return-- None None
>>> traduccion final: robot.move("forward", 2) (u'forward', u'2')
>>>
>>>
>>>----------- Processing sentence:         end ----------
>>>
>>
>>> ratio of similarity betwen:         end --and-- end --> 0.428571428571
>>> original, translation, score: end  0.428571428571
>>> compile: end --return-- <Parser 'end'>         end
>>> p.parse(sentence) sentence:         end <Result () {}>
>>> args encontrados: []
>>> traduccion final:  ()
>>>
>>>
>>>----------- Processing sentence:     else ----------
>>>
>>
>>> ratio of similarity betwen:     else --and-- else --> 0.666666666667
>>> original, translation, score: else else: 0.666666666667
>>> compile: else --return-- <Parser 'else'>     else
>>> p.parse(sentence) sentence:     else <Result () {}>
>>> args encontrados: []
>>> traduccion final: else: ()
>>>
>>>
>>>----------- Processing sentence:         turn drone left speed 2 ----------
>>>
>>
>>> ratio of similarity betwen:         turn drone left speed 2 --and-- turn drone {} speed {} --> 0.679245283019
>>> ratio of similarity betwen:         turn drone left speed 2 --and-- turn robot {} speed {} --> 0.566037735849
>>> original, translation, score: turn drone {} speed {} robot.turn("%s", %s) 0.679245283019
>>> compile: turn drone {} speed {} --return-- <Parser 'turn drone {} spe...'>         turn drone left speed 2
>>> p.parse(sentence) sentence:         turn drone left speed 2 <Result (u'left', u'2') {}>
>>> args encontrados: [u'left', u'2']
>>> looking for more blocks: left
>>> new sentence_mapping of: left --return-- None None
>>> looking for more blocks: 2
>>> new sentence_mapping of: 2 --return-- None None
>>> traduccion final: robot.turn("left", 2) (u'left', u'2')
>>>
>>>
>>>----------- Processing sentence:         stop robot-drone ----------
>>>
>>
>>> ratio of similarity betwen:         stop robot-drone --and-- stop robot-drone --> 0.8
>>> original, translation, score: stop robot-drone robot.stop() 0.8
>>> compile: stop robot-drone --return-- <Parser 'stop robot-drone'>         stop robot-drone
>>> p.parse(sentence) sentence:         stop robot-drone <Result () {}>
>>> args encontrados: []
>>> traduccion final: robot.stop() ()
>>>
>>>
>>>----------- Processing sentence:     end ----------
>>>
>>
>>> ratio of similarity betwen:     end --and-- end --> 0.6
>>> original, translation, score: end  0.6
>>> compile: end --return-- <Parser 'end'>     end
>>> p.parse(sentence) sentence:     end <Result () {}>
>>> args encontrados: []
>>> traduccion final:  ()
>>>
>>>
>>>----------- Processing sentence: end ----------
>>>
>>
>>> ratio of similarity betwen: end --and-- end --> 1.0
>>> original, translation, score: end  1.0
>>> compile: end --return-- <Parser 'end'> end
>>> p.parse(sentence) sentence: end <Result () {}>
>>> args encontrados: []
>>> traduccion final:  ()

-------------------
[32m#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time

def execute(robot):
    try:
        robot.take_off()
        while True:
            size = (robot.get_laser_distance())
            if ((size) > 0):
                x = (get x_position of object red)
                y = (get y_position of object red)
                if ((x) >   165):
                    robot.turn("right", 2)
                else:
                    robot.turn("left", 2)
                
                if ((y) >  110 ):
                    robot.move("down", 1)
                else:
                    robot.move("up", 1)
                
                if ((size) > 700):
                    robot.move("back", 2)
                else:
                    robot.move("forward", 2)
                
            else:
                robot.turn("left", 2)
                robot.stop()
            
        
    except KeyboardInterrupt:
        raise
[0m
-------------------

